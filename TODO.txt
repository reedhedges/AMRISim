
* Let user continue without ROS1 if no ros master running (i.e. buttons should be
  "No (exit)", "Yes (run roscore)", "No (continue)"
* Command line options to enable/disable ROS1 and Pioneer interfaces at runtime.
* Add options to GUI at startup to enable/disable robot interfaces (Pioneer/ROS1). Runtime menu
  items?
* Enable multiple ROS1 nodes for multiple robots (nodelets)
* Edit (review and improve) README
* Update to GTK 4 (see https://docs.gtk.org/gtk4/migrating-3to4.html).  Remove deprecated use, GTK 2.x support.
* Update Windows MSYS build procedure and documentation (use GTK4) (see https://www.gtk.org/docs/installations/windows/)
* Fix all warnings, fix all c++ code to correct usage for c++17.
* Maybe get rid of "RTK" in stage and use Cairo/GDK directly?? (Kind of a lot of work.) 
* A few memory leaks still exist in stage: 
    * Some strings are allocated with strdup() in stg_model_add_property_toggles() but not freed in stg_model_remove_property_toggles() (see XXX BUG comment. GTK api is complicated here...)
* In Stage, model properties are always copied. Add stg_model_set_property_ptr() or similar so that some models can manage their own memory, especially arrays of data. (Or I guess we can use existing API and pass pointer to pointer as set_property argument, so that just the pointer is copied.) In some places, code even allocates a temporary array or other data, uses stg_model_set_property() which copies it, then frees the temporary data!
* In Stage, don't allocate small objects and pass pointers; just copy struct directly. (IN PROGRESS)
  This often results in model code allocating data, using stg_model_set_property() which copies it, then freeing the data! 
  * stg_rtk_region_t (which is just a cairo_rect_int_t)
  * stg_rtk_color_t, stg_rtk_point_t (these are not generally allocated)
  * stg_rtk_stroke_t ? 
  * stg_polygon_t from stg_polygon_create() and stg_unit_polygon_create().
* In Stage, some pairs of values are used for points and sizes separately; use a struct
  which can be returned from accessor functions, and easily passed as parameter as well.
* In Stage, could we combine stg_rtk_canvas_t's flags into one int struct member?
* Does the movie capture stuff work? If not, remove code.
* Still some constants defined with #define in EmulatePioneer.cpp, MapLoader.cpp, etc.
* Update stage build for newer versions of autotools
* Stage optimization: Store separate dynamically sized arrays (like std::vector) containing full objects; not array of pointers (model implementation should not allocate memory for the model struct, just initialize given pointer into model array.)  For each type of object (model) for state update (and render? -- then object (model) type determines render order, which might be fine. object types should have separate functions to draw their shape representation and sensor data visualizations)  
* Debian/Ubuntu Packaging
* Remove unused stuff 
* Remove use of temp file
* Clearly document exact dependencies
* Change as many char* to std::string and string_view as possible
* Use shared_ptr etc instead of raw pointers
* True no-GUI build. 
  * Verify or refactor stage so that rendering/drawing depends on model types
    but model types do not directly include or depend on any rendering code.
    each model type might need to have rendering functions moved into separate
    .c files and header files.
* Containers (Docker eg) for GUI with VNC/RemoteDesktop or no-GUI, with and
  without simple Python examples, ARIA examples, ROS1 etc.   GitHub Codespaces
  config?
* Accept other map file formats (bitmap, ROS1 occupancy grid file)
  * Also option to subscribe to map data from a ROS1 map_server.
* Improve ROS1 client inerface. 
  * Bug: a disconnecting Pioneer client causes ROS1 node to stop publishing sonar.
  * Maybe separate builds for Pioneer/ARIA and ROS1
  * Enable/disable in GUI
  * Verify we are creating multiple ROS1 nodes in one process correcly.
  * Fix "XXX" and "TODO" items marked in code
  * EmulatePioneer and ROS1Node interfaces share a RobotInterface. Better to have
    separate interfaces (what state does StageIntetrface have?)
  * StageInterface class still assumes Pioneer robots in some places (eg with
    Pioneer parameters struct provided by EmulatePioneer to be filled in with
    specific parameters from Stage model definitions.  This could be generalized or
    inverted i.e. EmulatePioneer using an interface in RobotInterface to query
    parameters. )
  * Could publish more available data, including SIM_STAT and SIM_INFO data,
    GPS (if map is georeferenced), etc.
  * Map loading
  * Configuration
  * Improve build. (Use CMake? Support system-default-install (/usr), 
    etc.
  * ROS1 commands to access more of internal Stage API including adding/modifying
    objects and sensors.
  * Document
  * Fix or remove sonar publishing of pointcloud1 data (pointcloud2 data works). 
* ROS2 interface.

* Use more modern portable C++/stdlib features
  * Use std::chrono etc.
  * smart pointers
  * In Stage (and AMRISim), use std::random_device and uniform_real/int_distribution instead of rand(), or another better random number generation API (is there a C equivalent to those?).  Though drand48() is used for sensors and might be ok. Verify.
* Include some useful startup scripts for unattended operation eg systemd, 
  maybe docker config or info, AWS template (at least document requirements in
  README), etc.
* Extend command line flags to also accept config file? (Or hook into system standard config
  frameworks; systemd?)
* Finish adding multiple lasers?
* Add generic "beacon" or "bearing/range" or sensor(s), with opional customizable function to generate a "power" value derived from range and properties of target object(s).  Provide info about all sensed objects, plus a combined or averaged single bearing/range/power result.  Example: approximate a magnetometer or similar sensor.  Add version in which target object has an orientation and range of view.  This can approxmate something light a light sensor.
* Add more tests (unit and demos, internal and external clients)
  * Artificially move the robot a bit, then use something like ApprovalTestsCPP
    to verify that the state of the simuator is correct?
  * Feature to record Pioneer protocol output
* Add command to turn odometry error on/off
* Add GUI command to change any property?
* Dynamically configurable model hierarcy and properties in GUI.
* Replace GUI? Qt? Remote Web Frontend UI? Or just upgrade to newer GTK versions?
* Maybe a remotely acessible web view (or start with simple
  status/control/config web interface)? Especially useful for GUI-less versions
* Internal client interface to embedded scripting language (to simulate a robot control system running a script or plugin, rather than communicating with separate software client.) 
* LogInterface needs to include multiple identifiers in messages (robot name, interface name, etc.)
* Modular, configurable position and sensor error implementations. Selectable in configuration, easily implemented in plugin or embedded script (eg callback functions, and easy interface for stage config parameters specific to that module, and interface to robot parameters)
* Interface for client programs to log and/or plot data on the simulation GUI
 (with timestamps and simulation step)
* Rewind/play back simulation.
* Run embedded scripts with access to simulator or stage API? (In thread safe
  way)
* Optimize stg_rtk_canvas_t -- it is probably storing more than it needs to. Some of these don't need to be variables but constants. Some items can be stored as pointers in separate objects (which are allocated and initialized with the canvas struct). It can be reordered to reduce padding. 
* Add command line options that enable setting of process priority (and/or main thread priority and affinity.) 
