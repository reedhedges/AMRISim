
* Clean up main.cc.  Better organize globals.  Move some gui code in main.cc
  into functions in another file (e.g. appgui.cc).  Should MapLoader "own" the map
  rather than have a separate global?   [IN PROGRESS]
* Fix build to explicitly choose between getting ARIA from $ARIA source
  directory vs. system, and separately choose static library link vs. dynamic 
  library link.   
* Command line options to enable/disable ROS1 and Pioneer interfaces at runtime
  from the command line.
* Add options to GUI at startup to enable/disable robot interfaces (Pioneer/ROS1). Runtime menu
  items?
* Enable multiple ROS1 nodes for multiple robots (nodelets)
* Edit (review and improve) README
* Update to using GTK 3 or 4?
  * <https://docs.gtk.org/gtk3/migrating-2to3.html>
  * <https://docs.gtk.org/gtk4/migrating-3to4.html>
* Make sure we are using latest version of GTK on Windows. Update particularly
  old or deprecated GTK API usage and remove support for
  old GTK versions. 
* Fix all warnings, fix all c++ code to correct usage for c++17.
* Update stage build for newer versions of autotools
* Debian/Ubuntu Packaging (note, need to make sure to choose dynamic linking to
  libAria when building deb packages)
* Remove unused stuff 
* Remove use of temp file
* Clearly document exact dependencies
* Change as many char* to std::string and string_view as possible
* Use shared_ptr etc instead of raw pointers
* True no-GUI build. 
  * Verify or refactor stage so that rendering/drawing depends on model types
    but model types do not directly include or depend on any rendering code.
    each model type might need to have rendering functions moved into separate
    .c files and header files.
* Containers (Docker eg) for GUI with VNC/RemoteDesktop or no-GUI, with and
  without simple Python examples, ARIA examples, ROS1 etc.   GitHub Codespaces
  config?
* Accept other map file formats (bitmap, ROS1 occupancy grid file)
  * Also option to subscribe to map data from a ROS1 map_server.
* Improve ROS1 client inerface. 
  * Bug: a disconnecting Pioneer client causes ROS1 node to stop publishing sonar.
  * Maybe separate builds for Pioneer/ARIA and ROS1
  * Enable/disable in GUI
  * Verify we are creating multiple ROS1 nodes in one process correcly.
  * Fix "XXX" and "TODO" items marked in code
  * EmulatePioneer and ROS1Node interfaces share a RobotInterface. Better to have
    separate interfaces (what state does StageIntetrface have?)
  * StageInterface class still assumes Pioneer robots in some places (eg with
    Pioneer parameters struct provided by EmulatePioneer to be filled in with
    specific parameters from Stage model definitions.  This could be generalized or
    inverted i.e. EmulatePioneer using an interface in RobotInterface to query
    parameters. )
  * Could publish more available data, including SIM_STAT and SIM_INFO data,
    GPS (if map is georeferenced), etc.
  * Map loading
  * Configuration
  * Improve build. (Use CMake? Support system-default-install (/usr), 
    etc.
  * ROS1 commands to access more of internal Stage API including adding/modifying
    objects and sensors.
  * Document
  * Fix or remove sonar publishing of pointcloud1 data (pointcloud2 data works). 
* ROS2 interface.
* Use more modern portable C++/stdlib features
  * Use std::chrono etc.
  * smart pointers
* Include some useful startup scripts for unattended operation eg systemd, 
  maybe docker config or info, AWS template (at least document requirements in
  README), etc.
* Extend command line flags to also accept config file? (Or hook into system standard config
  frameworks; systemd?)
* Finish adding multiple lasers
* Add more tests (unit and demos, internal and external clients)
  * Artificially move the robot a bit, then use something like ApprovalTestsCPP
    to verify that the state of the simuator is correct?
  * Feature to record Pioneer protocol output
* Add command to turn odometry error on/off
* Add command to change any property?
* Dynamically configurable model hierarcy and properties in GUI.
* Replace GUI? Qt? Remote Web Frontend UI? Or just upgrade to newer GTK versions?
* Maybe a remotely acessible web view (or start with simple
  status/control/config web interface)? Especially useful for GUI-less versions
* Internal client interface to embedded scripting language?
* LogInterface needs to include multiple identifiers in messages (robot name, interface name, etc.)
* Modular, configurable position and sensor error implementations. Selectable in configuration, easily implemented in plugin or embedded script (eg callback functions, and easy interface for stage config parameters specific to that module, and interface to robot parameters)
* Interface for client programs to log and/or plot data on the simulation GUI
 (with timestamps and simulation step)
* Rewind/play back simulation.
* Run embedded scripts with access to simulator or stage API? (In thread safe
  way)

